{"version":3,"file":"static/webpack/static/development/pages/index.js.182bdaf020f911b7e7be.hot-update.js","sources":["webpack:///./components/search-engine.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport useDebounce from './debounce';\n\nimport CategoryLink from './category-link';\nimport BookmarkLink from './bookmark-link';\n\nconst minQLenght = 3;\n\nconst SearchEngine = ({ bookmarks }) => {\n\n  // State and setter for search term\n  const [query, setQuery] = useState('');\n  // State and setter for search results\n  const [results, setResults] = useState([]);\n  // State for search status (whether there is a pending API request)\n  const [isSearching, setIsSearching] = useState(false);\n\n  // Now we call our hook, passing in the current query value.\n  // The hook will only return the latest value (what we passed in) ...\n  // ... if it's been more than 500ms since it was last called.\n  // Otherwise, it will return the previous value of query.\n  // The goal is to only have the API call fire when user stops typing ...\n  // ... so that we aren't hitting our API rapidly.\n  const debouncedQuery = useDebounce(query, 500);\n\n  // Here's where the API call happens\n  // We use useEffect since this is an asynchronous action\n  useEffect(\n    () => {\n      // Make sure we have a value (user has entered something in input)\n      if (debouncedQuery) {\n        // Set isSearching state\n        setIsSearching(true);\n        // Fire off our API call\n        searchCharacters(debouncedQuery, bookmarks).then(results => {\n          // Set back to false since request finished\n          setIsSearching(false);\n          // Set results state\n          setResults(results);\n        });\n      } else {\n        setResults([]);\n      }\n    },\n    // This is the useEffect input array\n    // Our useEffect function will only execute if this value changes ...\n    // ... and thanks to our hook it will only change if the original ...\n    // value (query) hasn't changed for more than 500ms.\n    [debouncedQuery]\n  );\n\n  return (\n    <div>\n      <form className=\"pure-form\">\n        <input\n          type=\"text\" placeholder=\"Search\"\n          onChange={e => setQuery(e.target.value)} />\n        <button className=\"pure-button\" onClick={e => setQuery('')} disabled={query.length >= minQLenght}>\n          Clear Search\n        </button>\n      </form>\n      {isSearching && <div>Searching ...</div>}\n      {results}\n    </div>\n  );\n}\n\nfunction searchCharacters(query, bookmarks) {\n  return new Promise((resolve, reject) => {\n    let output;\n    if (query.length > minQLenght) {\n      let results = {};\n      let count = 0;\n      let re = new RegExp(query, 'gi');\n      // oooh, 3 nested for loops, not nice but will do\n      for (const cat in bookmarks) {\n        results[cat] = [];\n        for (const bookmark of bookmarks[cat]) {\n          for (const field of ['title', 'description']) {\n            if (bookmark[field].match(re)) {\n              results[cat].push(bookmark);\n              count++;\n              break;\n            }\n          }\n        }\n      }\n      output = <div>\n        <p>Your search for {query} produced {count} results</p>\n        {Object.keys(results).map((cat, iC) => <div>\n          <h2>{cat} - {results[cat].length} results</h2>\n          {results[cat].map((bookmark, iB) => <BookmarkLink key={`${iC}${iB}`} {...bookmark} />)}\n        </div>)}\n      </div>\n    } else {\n      output = <p>Type at least 3 letters to trigger a search</p>\n    }\n    resolve(output);\n  });\n}\n\nexport default SearchEngine;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}